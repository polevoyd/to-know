{"version":3,"sources":["actions/actions.js","components/CardForm.js","components/CardPreview.js","components/CardsResults.js","components/SettingsTab.js","components/Greeting.js","components/CardsMain.js","reducers/cardReducer.js","index.js"],"names":["ADD_CARDS","SHOW_CARD","HIDE_CARD","CHANGE_CATEGORY","SET_CODE_DATA","UPDATE_STATE","ADD_USERNAME","UPDATE_COLORS","TOGGLE_MENU","UPDATE_CARDS_ARRAY","toggleMenu","type","CardForm","handleReplClick","_this","handleCopyClick","window","open","concat","formatToLanguage","focus","handleGithubClick","rawLink","props","cards","showCardLink","split","name","length","repo","file","link","join","_this2","this","request","XMLHttpRequest","responseType","onload","reader","FileReader","readAsText","response","e","codeData","dispatch","target","result","send","cardToShow","document","body","style","overflow","removeAttribute","text","querySelector","innerText","tempEl","createElement","value","appendChild","select","execCommand","removeChild","console","log","codeTextData","react_default","a","contentEditable","spellCheck","suppressContentEditableWarning","showCardData","className","onClick","tooltip","handlePanelClicks","React","Component","connect","state","CardPreview","category","backgroundColor","categoryColors","color","categoryToFilter","filteredCards","cardsObjects","filter","cardObj","map","card","key","getStyleFromState","pickClass","handleClick","onDragStart","event","draggable","addSpacesToName","CardsResults","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","store","JSON","parse","localStorage","getItem","userSlashRepo","user","splice","showCard","toConsumableArray","letter","charCodeAt","cardName","dataTransfer","setData","preventDefault","newCategory","getData","changeCategory","setTimeout","setItem","stringify","_this3","components_CardForm","showCardName","onDragOver","onDrop","components_CardPreview","SettingsTab","handleColorChange","one","two","three","fontColor","handleLinkSubmit","persist","RegExp","test","trim","fetch","then","res","json","userName","arrayOfCards","newStateCardsArray","cardsWithChangedCategories","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","cardNew","err","return","addCards","removeItem","location","reload","onMouseLeave","handleMouseOut","onSubmit","defaultValue","setRepositoryLink","onChange","id","handleResetButtonClick","href","Greeting","CardsMain","handleRefreshCards","previousLink","newCardsArray","updateCardsArray","clear","handleMenuToggle","menuIsOpened","components_SettingsTab","components_Greeting","components_CardsResults","initialState","cardReducer","arguments","action","objectSpread","createStore","ReactDOM","render","es","components_CardsMain","getElementById"],"mappings":"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","file":"static/js/main.c93898ee.chunk.js","sourcesContent":["\n/*\n * action types \n */\n\nexport const ADD_CARDS = 'ADD_CARDS'\nexport const ADD_REPO = 'ADD_REPO' \nexport const SHOW_CARD = 'SHOW_CARD'\nexport const HIDE_CARD = 'HIDE_CARD'\nexport const CHANGE_CATEGORY = 'CHANGE_CATEGORY'\nexport const SET_CODE_DATA = 'SET_CODE_DATA'\nexport const UPDATE_STATE = 'UPDATE_STATE'\nexport const ADD_USERNAME = 'ADD_USERNAME'\nexport const UPDATE_COLORS = 'UPDATE_COLORS'\nexport const TOGGLE_MENU = 'TOGGLE_MENU'\nexport const UPDATE_CARDS_ARRAY = 'UPDATE_CARDS_ARRAY'\n\n/*\n * action creators\n */\n\nexport function addCards(newStateCardsArray) {\n    return { type: ADD_CARDS, newStateCardsArray } \n}\n\nexport function showCard(name, link) {\n    return { type: SHOW_CARD, name: name, link }\n}\n\nexport function hideCard() {\n    return { type: HIDE_CARD }\n}\n\nexport function changeCategory(name, newCategory) {\n    return { type: CHANGE_CATEGORY, name, newCategory }\n}\n\nexport function setCodeData(codeData) {\n    return { type: SET_CODE_DATA, codeData }\n}\n\nexport function updateState(state) {\n    return { type: UPDATE_STATE, state }\n}\n\nexport function addUsername(userName) {\n    return { type: ADD_USERNAME, user: userName }\n}\n\nexport function updateColors(newColors) {\n    return { type: UPDATE_COLORS, categoryColors: newColors }\n}\n\nexport function toggleMenu() {\n    return { type: TOGGLE_MENU }\n}\n\nexport function updateCardsArray(newStateCardsArray) {\n    return { type: UPDATE_CARDS_ARRAY, newCardsArray: newStateCardsArray }\n}","import React from 'react';\nimport {connect} from 'react-redux';\nimport {setCodeData} from '../actions/actions';\n\nclass CardForm extends React.Component {\n \n    /***********************************************************/\n    // get textcode from link\n    componentWillMount() {\n        \n        // setting up request\n        const request = new XMLHttpRequest();\n        request.open('GET', this.props.link, true);\n        request.responseType = 'blob';\n        \n        request.onload = () => {\n            const reader = new FileReader();\n            reader.readAsText(request.response);\n\n            reader.onload =  (e) => {\n                this.props.dispatch(setCodeData(e.target.result))\n            };\n        };\n        request.send();\n    }\n\n    /***********************************************************/\n    // input: format, output: language\n    formatToLanguage() {\n        const format = this.props.cardToShow.split('.')[this.props.cardToShow.split('.').length-1];\n        switch (format) {\n            case 'js': return 'javascript';\n            case 'py': return 'python3';\n            case 'rb': return 'ruby';\n            case 'html': return 'html';\n            case 'css': return 'html';\n            case 'java': return 'java';\n            case 'cpp': return 'cpp';\n            case 'cs': return 'csharp';\n            default: return '';\n        }\n    }\n\n    /***********************************************************/\n    // make body unscrollable when form is open\n    componentDidMount() {\n        document.body.style.overflow = 'hidden';\n    }\n\n    /***********************************************************/\n    // make body scrollable when form is closed\n    componentWillUnmount() {\n        document.body.removeAttribute('style');\n    }\n\n    /***********************************************************/\n    // copy code to a clipboard\n    handleCopyClick() {\n        const text = document.querySelector('code').innerText;\n        const tempEl = document.createElement('textarea');\n        tempEl.value = text;\n        document.body.appendChild(tempEl);\n        tempEl.select();\n        document.execCommand('copy');\n        document.body.removeChild(tempEl);\n        console.log('Text copied to clipboard!');     \n    }\n\n    /***********************************************************/\n    // copy to clipboard and go to repl.it to try\n    // arrow cause we need access to global 'this'\n    handleReplClick = () => {\n        // copy content before going to external link\n        this.handleCopyClick();\n        const win = window.open(`https://repl.it/languages/${this.formatToLanguage()}`, `_blank`);\n        win.focus();\n    }\n\n    /***********************************************************/\n    // go to original github page\n    handleGithubClick = () => {\n        let rawLink = this.props.cards.showCardLink.split('/');\n        let name = rawLink[rawLink.length-4];\n        let repo = rawLink[rawLink.length-3];\n        let file = rawLink[rawLink.length-1];\n        let link = ['https://github.com'].concat(name).concat(repo).concat(['blob/master']).concat(file).join('/');\n\n        const win = window.open(link, `_blank`);\n        win.focus();\n    }\n\n    /***********************************************************/\n    render(){\n        \n        const codeTextData = \n            <figure>\n                <pre>\n                    <code contentEditable={true} spellCheck={false} suppressContentEditableWarning={true}>\n                        {this.props.cards.showCardData}\n                    </code>\n                </pre>\n            </figure>;\n\n        return(\n            <div className=\"card-edit-form\">\n                <div className=\"card-edit-form-header\">\n                <div className=\"text-wrapper\">\n                    <h4>{this.props.cardToShow}</h4>\n                </div>\n                <div className=\"buttons-wrapper\">\n                    <div className=\"icon-wrap\" onClick={this.handleCopyClick} tooltip=\"Copy code to clipboard\"><i  className=\"far fa-clone card-form button copy\"></i></div>\n                    <div className=\"icon-wrap\" onClick={this.handleReplClick} tooltip=\"Copy and run at Repl.it\"><i className=\"fas fa-terminal card-form button repl\"></i></div>\n                    <div className=\"icon-wrap\" onClick={this.handleGithubClick} tooltip=\"Open at GitHub\"><i className=\"fab fa-github-square card-form button github\"></i></div>\n                    <div className=\"icon-wrap\" onClick={this.props.handlePanelClicks} tooltip=\"Close\"><i className=\"far fa-window-close card-form button close\"></i></div>\n                </div>\n                </div>\n                <div className=\"code-block\">\n                    {codeTextData}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { cards: state };\n}\n\n// connect to access store (this.props.cardToShow)\nexport default connect(mapStateToProps)(CardForm);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nclass CardPreview extends React.Component {\n\n    /***********************************************************/\n    // Return a class name depending on category\n\n    pickClass(category) {\n\n        switch (category) {\n            case 'new':\n                return 'card-preview card-preview-new'\n\n            case 'active':\n                return 'card-preview card-preview-active'\n\n            case 'complete':\n                return 'card-preview card-preview-complete'\n            \n            default:\n                return 'card-preview card-preview-new';\n        }\n    }\n\n    /***********************************************************/\n    // returns style with { backgroundColor: COLOR_IN_STATE }\n    \n    getStyleFromState(category) {\n\n        switch (category) {\n            case 'new':\n                return { backgroundColor: this.props.cards.categoryColors[0] , color: this.props.cards.categoryColors[3]}\n            case 'active':\n                return { backgroundColor: this.props.cards.categoryColors[1] , color: this.props.cards.categoryColors[3]}\n            case 'complete':\n                return { backgroundColor: this.props.cards.categoryColors[2] , color: this.props.cards.categoryColors[3]}\n            default:\n                break\n        }\n    }\n\n    /***********************************************************/\n\n    render() {\n\n        // filter cards by specific category\n        const cards = this.props.cards;\n        const categoryToFilter = this.props.category;\n\n        const filteredCards = cards.cardsObjects\n        .filter(cardObj => cardObj.category === categoryToFilter)\n        .map(card => {\n            return(<div key={categoryToFilter + card.name} \n                style={this.getStyleFromState(categoryToFilter)}\n                className={this.pickClass(this.props.category)} \n                onClick={() => this.props.handleClick(card.name)}\n                onDragStart={(event) => this.props.onDragStart(event, card.name)}\n                draggable>\n                <h4>{`${this.props.addSpacesToName(card.name)}`}</h4>\n            </div>)\n        });\n\n        return(\n            <div>{filteredCards}</div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { cards : state }\n}\n\nexport default connect(mapStateToProps)(CardPreview);","import React from 'react';\nimport CardForm from './CardForm';\nimport {connect} from 'react-redux';\nimport CardPreview from './CardPreview';\nimport {showCard} from '../actions/actions';\nimport {hideCard} from '../actions/actions';\nimport {changeCategory} from '../actions/actions';\nimport {updateState} from '../actions/actions'\n\nclass CardsResults extends React.Component {\n    constructor(props){\n        super(props);\n\n        // bind cause it is modifying state\n        this.handleClick = this.handleClick.bind(this);\n        this.handlePanelClicks = this.handlePanelClicks.bind(this);\n    }\n\n    /***********************************************************/\n    // Set state from local storage if it exist there\n    // ( uncomment when finished with testing )\n\n    componentWillMount() {\n        const store = JSON.parse(localStorage.getItem('cardsState'));\n        if (store) {\n            this.props.dispatch(updateState(store));\n        }\n    }\n\n    \n    /***********************************************************/\n    // Click on each card preview to show/hide card\n\n    handleClick(name) {\n        const userSlashRepo = this.props.cards.user.split('/').splice(3,2).join('/');\n        const link = `https://raw.githubusercontent.com/${userSlashRepo}/master/${name}`;\n        this.props.dispatch(showCard(name, link));\n    }\n\n    /***********************************************************/\n    // Close button\n\n    handlePanelClicks(event) {\n        this.props.dispatch(hideCard());\n    }\n\n    /***********************************************************/\n    // Helper function to add spaces to a card name (for wrapping)\n\n    addSpacesToName(name){\n        return [...name].map(letter => {\n            return (letter.charCodeAt(0) > 64 && letter.charCodeAt(0) < 91) ? ' ' + letter : letter\n        })\n        .join('')\n    }\n\n    /***********************************************************/\n    // Drag start\n\n    onDragStart(event, cardName){\n        event.dataTransfer.setData('card', cardName);    \n    }\n\n    /***********************************************************/\n    // Drag over\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    /***********************************************************/\n    // Drop\n\n    onDrop(event, newCategory) {\n        const name = event.dataTransfer.getData('card');\n        this.props.dispatch(changeCategory(name, newCategory));\n\n        // save updated state to a local storage\n        setTimeout(() => {\n            // here we need to save current state to a local storage\n            // sleep needed cause it saving faster than dispatch\n            localStorage.setItem('cardsState', JSON.stringify(this.props.cards));\n        }, 300);\n    }\n\n    /***********************************************************/\n    \n    render(){\n        return(\n            <div className=\"cards-all-results\">\n                {this.props.cards.showCard ? \n                <CardForm cardToShow={this.addSpacesToName(this.props.cards.showCardName)} user={this.props.cards.user} link={this.props.cards.showCardLink} handlePanelClicks={this.handlePanelClicks}/> : null}\n                <div className=\"drag-sections\">\n                    <div onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDrop(event, 'new')} className=\"new\">\n                        <CardPreview cards={this.props.cards} category=\"new\" onDragStart={this.onDragStart} handleClick={this.handleClick} addSpacesToName={this.addSpacesToName}/>\n                        </div>\n                    <div onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDrop(event, 'active')} className=\"active\">\n                        <CardPreview cards={this.props.cards} category=\"active\" onDragStart={this.onDragStart} handleClick={this.handleClick} addSpacesToName={this.addSpacesToName}/>\n                        </div>\n                    <div onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDrop(event, 'complete')} className=\"complete\">\n                        <CardPreview cards={this.props.cards} category=\"complete\" onDragStart={this.onDragStart} handleClick={this.handleClick} addSpacesToName={this.addSpacesToName}/>\n                    </div> \n                </div>            \n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cards: state\n    }\n}\n\nexport default connect(mapStateToProps)(CardsResults);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {addCards, toggleMenu} from '../actions/actions';\nimport {addUsername} from '../actions/actions';\nimport {updateColors} from '../actions/actions';\n\n/***********************************************************/\n\nclass SettingsTab extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.handleLinkSubmit = this.handleLinkSubmit.bind(this);\n    }\n\n    /***********************************************************/\n    // on submit \n\n    handleLinkSubmit(event) {\n        event.preventDefault();\n        event.persist();\n\n        // validation\n        const valid = new RegExp(/^\\https:\\/\\/github.com\\/\\w{1,15}\\/.{1,70}/);\n\n        if (valid.test(event.target[0].value.trim())){\n            \n            const link = `https://to-know.herokuapp.com?repo=${event.target[0].value}`;\n            fetch(link)\n            .then(res => res.json())\n            .then(res => {\n\n                // get array of cards and dispatch it\n                const arrayOfCards = res.map(card => {\n                    return {\n                        name: card.name,\n                        link: card.link,\n                        category: 'new'\n                    }\n                })\n                this.props.dispatch(addUsername(event.target[0].value));\n                return arrayOfCards;\n            })\n            .then((arrayOfCards) => {\n                // save updated state in a local storage\n                // here we need to save current state to a local storage\n                // but first, check for a cards that already been moved\n\n                let newStateCardsArray = arrayOfCards;\n\n                if (localStorage.getItem('cardsState')) {\n                    \n                    // if we already have some set in local storage\n                    let oldState = JSON.parse(localStorage.getItem('cardsState')).cardsObjects;\n                    const cardsWithChangedCategories = oldState.filter(card => card.category !== 'new');\n\n                    // checking for alternated categories\n                    for (let card of cardsWithChangedCategories) {\n                        for (let cardNew of newStateCardsArray) {\n                            if (card.name === cardNew.name) {\n                                cardNew.category = card.category;\n                            }\n                        }\n                    }\n                }\n                \n                // send updated cards\n                this.props.dispatch(addCards(newStateCardsArray));\n            })\n            .then(() => {\n                // finally, saving updated state\n                localStorage.setItem('cardsState', JSON.stringify(this.props.cards));\n                this.props.dispatch(toggleMenu())\n            })\n        } else {\n            console.log('Wrong link format!')\n        }\n    }\n    \n    /***********************************************************/\n    // on color changes\n\n    handleColorChange = (event) => {\n\n        const one = document.querySelector('#color-one').value;\n        const two = document.querySelector('#color-two').value;\n        const three = document.querySelector('#color-three').value;\n        const fontColor = document.querySelector('#color-font').value;\n\n        this.props.dispatch(updateColors([one, two, three, fontColor]));\n        localStorage.setItem('cardsState', JSON.stringify(this.props.cards));\n    }\n\n    /***********************************************************/\n    // returns link: users or default\n\n    setRepositoryLink() {\n        if (localStorage.getItem('cardsState')) {\n            return JSON.parse(localStorage.getItem('cardsState')).user;\n        } else {\n            return 'https://github.com/polevoyd/to-know-content';\n        }\n    }\n\n    /***********************************************************/\n    // cleans storage and reload page\n\n    handleResetButtonClick() {\n        localStorage.removeItem('cardsState');\n        window.location.reload();\n    }\n\n    /***********************************************************/\n    render(){\n\n        return(\n            <div className=\"settings-tab\" onMouseLeave={this.handleMouseOut}>\n                <p className=\"text-block\">\n                Paste a link to a repository and click <b>'Upload'</b> to start.<br></br><br></br> \n                Press <em><i className=\"fas fa-retweet\"></i></em> to upload cards from previous link <br></br><br></br>\n                Press <b>'Reset'</b> button to remove all the cards.</p> <br></br><br></br>\n                <div className=\"add-card\">\n                    <form onSubmit={this.handleLinkSubmit}>\n                        <label> Link:<input type=\"text\" defaultValue={this.setRepositoryLink()}/>\n                        </label>\n                        <input type=\"submit\" value=\"Upload\"/>\n                    </form>\n                </div>\n                <div className=\"picker-one\">\n                    <label>First Category: </label>\n                    <input onChange={this.handleColorChange} type=\"color\" id=\"color-one\" name=\"color-one\" value={this.props.cards.categoryColors[0]}></input> \n                </div>\n                <div className=\"picker-two\">\n                    <label>Second Category: </label>\n                    <input onChange={this.handleColorChange} type=\"color\" id=\"color-two\" name=\"color-two\" value={this.props.cards.categoryColors[1]}></input>\n                </div>\n                <div className=\"picker-three\">\n                    <label>Third Category: </label>\n                    <input onChange={this.handleColorChange} type=\"color\" id=\"color-three\" name=\"color-three\" value={this.props.cards.categoryColors[2]}></input>\n                </div>\n                <div className=\"button-reset\">\n                   <button onClick={this.handleResetButtonClick}>Reset</button>\n                </div>\n                <div className=\"picker-font\">\n                    <label>Font: </label>\n                    <input onChange={this.handleColorChange} type=\"color\" id=\"color-font\" name=\"color-font\" value={this.props.cards.categoryColors[4]}></input>\n                </div>\n                <p className=\"name-tag\"><a href=\"http://www.polevoy.in\" target=\"blank\">www.polevoy.in</a> </p>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {cards: state}\n}\n\n// connect gives access to dispatch as a prop\nexport default connect(mapStateToProps)(SettingsTab);","import React from 'react';\n\nconst Greeting = (props) => {\n    return(\n        <div className=\"greeting\">\n            <h1>To Know</h1>\n            <p>Hello!</p>\n            <p>This is an app that convert your GitHub repository into a study cards. Every file from a repo as a card, which you can open and drag and drop across three different categories. It makes it easy to study concepts and code challanges, while effortlessly managing them in one place. Hope you'll find it helpful too.</p>\n            <h5>Press a <b><i className=\"far fa-caret-square-down\"></i></b> icon in top left corner to start</h5>\n            <p className=\"greetings-website-link\"><a href=\"http://www.polevoy.in\" target=\"blank\">www.polevoy.in</a> </p>\n        </div>\n    );\n}\n\nexport default Greeting;","import React from 'react';\nimport CardsResults from './CardsResults';\nimport SettingsTab from './SettingsTab';\nimport { connect } from 'react-redux';\nimport Greeting from './Greeting';\nimport {addCards, toggleMenu, updateCardsArray} from '../actions/actions';\n\nclass CardsMain extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleMenuToggle = this.handleMenuToggle.bind(this);\n        this.handleRefreshCards = this.handleRefreshCards.bind(this);\n    }\n\n    /***********************************************************/\n    // on refresh \n\n    handleRefreshCards = (event) => {\n        event.preventDefault();\n\n        if (localStorage.getItem('cardsState')) {\n            \n            const previousLink = JSON.parse(localStorage.getItem('cardsState')).user;\n            const link = `https://to-know.herokuapp.com?repo=${previousLink}`;\n            fetch(link)\n            .then(res => res.json())\n            .then(res => {\n                return res.map(card => {\n                    return {\n                        name: card.name,\n                        link: card.link,\n                        category: 'new'\n                    }\n                })\n            })\n            .then((arrayOfCards) => {\n                let newStateCardsArray = arrayOfCards;\n                if (localStorage.getItem('cardsState')) {\n                    \n                    // if we already have some set in local storage\n                    let oldState = JSON.parse(localStorage.getItem('cardsState')).cardsObjects;\n                    const cardsWithChangedCategories = oldState.filter(card => card.category !== 'new');\n\n                    // checking for alternated categories\n                    for (let card of cardsWithChangedCategories) {\n                        for (let cardNew of newStateCardsArray) {\n                            if (card.name === cardNew.name) {\n                                cardNew.category = card.category;\n                            }\n                        }\n                    }\n                }\n                // send updated cards\n                this.props.dispatch(updateCardsArray(newStateCardsArray));\n                localStorage.clear();\n            })\n            .then(() => {\n                // finally, saving updated state\n                localStorage.setItem('cardsState', JSON.stringify(this.props.cards));\n                // window.location.reload();\n            })\n        } else {\n            console.log('There is no previously saved link.')\n        }\n    }\n\n    /***********************************************************/\n    // Toggle a menu\n\n    handleMenuToggle(){\n        this.props.dispatch(toggleMenu());\n    }\n\n    /***********************************************************/\n\n    render(){\n        return(\n            <div>\n                <div className=\"menu-icon\" onClick={this.handleMenuToggle}><i className=\"far fa-caret-square-down\"></i></div>\n                <div className=\"refresh-icon\" onClick={this.handleRefreshCards}><i className=\"fas fa-retweet\"></i></div>\n                {this.props.cards.menuIsOpened ? <SettingsTab /> : null}\n                {localStorage.getItem('cardsState') ? null : <Greeting />}\n                <CardsResults />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { cards: state }\n}\n\nexport default connect(mapStateToProps)(CardsMain);","// initialising state\nconst initialState =\n{\n    showCard: false,\n    showCardName: null,\n    showCardData: null,\n    showCardLink: null,\n    user: '',\n    cardsObjects: [],\n    categoryColors: ['#FFFAE2', '#FCEC52', '#9FD356', '#000000'],\n    menuIsOpened: false\n}\n\nconst cardReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case 'ADD_CARDS':\n            return {\n                ...state,\n                cardsObjects: action.newStateCardsArray\n            }\n\n        case 'ADD_USERNAME':\n            return {...state, user: action.user }\n\n        case 'SHOW_CARD':\n        return {\n            ...state,\n            showCard: !state.showCard,\n            showCardName: action.name,\n            showCardLink: action.link\n        }\n        \n        case 'HIDE_CARD':\n        return {...initialState,\n            showCard: !state.showCard,\n            user: state.user,\n            cardsObjects: state.cardsObjects\n        }\n\n        case 'CHANGE_CATEGORY':\n        const newCardsArray = state.cardsObjects.map(card => {\n            return (card.name === action.name) ? { name : card.name, category : action.newCategory} : card;\n        })\n        return { ...state,\n            showCardName: '', showCardData: null, showCardLink: null, cardsObjects: newCardsArray\n        }\n \n        case 'SET_CODE_DATA':\n            return {...state, showCardData: action.codeData }\n        \n        case 'UPDATE_STATE':\n            return action.state;\n\n        case 'UPDATE_COLORS':\n            return { ...state, categoryColors: action.categoryColors }\n\n        case 'TOGGLE_MENU':\n            return { ...state, menuIsOpened: !state.menuIsOpened }\n\n        case 'UPDATE_CARDS_ARRAY':\n            return { ...state, cardsObjects: action.newCardsArray }\n\n        default:\n            return state;\n    }\n}\n\nexport default cardReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport CardsMain from './components/CardsMain';\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport cardReducer from './reducers/cardReducer';\n\n\nconst store = createStore(cardReducer); \n\nReactDOM.render(\n    <Provider store={store}>\n        <CardsMain />\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}