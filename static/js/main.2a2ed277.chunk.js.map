{"version":3,"sources":["components/CardForm.js","components/CardPreview.js","actions/actions.js","components/CardsResults.js","components/AddCards.js","components/CardsMain.js","reducers/cardReducer.js","index.js"],"names":["CardForm","document","body","style","overflow","removeAttribute","link","concat","this","props","user","cardToShow","split","join","embeddedCodeEl","react_default","a","createElement","title","height","width","src","scrolling","frameBorder","allowtransparency","allowFullScreen","sandbox","className","onClick","handlePanelClicks","React","Component","connect","CardPreview","_this","cards","categoryToFilter","category","filteredCards","cardsObjects","filter","cardObj","map","card","key","name","handleClick","onDragStart","event","draggable","addSpacesToName","ADD_CARDS","SHOW_CARD","HIDE_CARD","CHANGE_CATEGORY","CardsResults","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","dispatch","type","showCard","toConsumableArray","letter","charCodeAt","cardName","dataTransfer","setData","preventDefault","newCategory","getData","changeCategory","_this2","components_CardForm","showCardName","onDragOver","onDrop","components_CardPreview","state","arrayOfCards","AddCards","handleLinkSubmit","target","value","userName","xhr","XMLHttpRequest","onload","responseXML","querySelectorAll","forEach","element","cardObject","innerText","push","open","responseType","send","setTimeout","addCards","onSubmit","defaultValue","CardsMain","components_AddCards","components_CardsResults","initialState","cardReducer","arguments","length","undefined","action","newCardsArray","store","createStore","ReactDOM","render","es","components_CardsMain","getElementById"],"mappings":"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","file":"static/js/main.2a2ed277.chunk.js","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\n\nclass CardForm extends React.Component{\n \n    // make body unscrollable when form is open\n    componentDidMount() {\n        document.body.style.overflow = 'hidden';\n    }\n\n    // make body scrollable when form is closed\n    componentWillUnmount() {\n        document.body.removeAttribute('style');\n    }\n\n    render(){\n        \n        // creating a link from username + taking card name from a state\n        const link = `https://repl.it/@${this.props.user}/${this.props.cardToShow.split(' ').join('')}?lite=true`;\n        const embeddedCodeEl = <iframe title=\"currentCard\" height=\"700px\" width=\"100%\" src={link} scrolling=\"no\" frameBorder=\"no\" allowtransparency=\"yes\" allowFullScreen=\"yes\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>;\n        \n        return(\n            <div className=\"card-edit-form\">\n                <div className=\"card-edit-form-header\">\n                    <h4>{this.props.cardToShow}</h4>\n                    <div className=\"card-form button close\" onClick={this.props.handlePanelClicks}></div>\n                </div>\n                {embeddedCodeEl}\n            </div>\n        );\n    }\n}\n\n// connect to access store (this.props.cardToShow)\nexport default connect()(CardForm);\n","import React from 'react';\n\nclass CardPreview extends React.Component {\n    render() {\n\n        // filter cards by specific category\n        const cards = this.props.cards;\n        const categoryToFilter = this.props.category;\n\n        const filteredCards = cards.cardsObjects\n        .filter(cardObj => cardObj.category === categoryToFilter)\n        .map(card => {\n            return(<div key={categoryToFilter + card.name} \n                className=\"card-preview\" \n                onClick={() => this.props.handleClick(card.name)}\n                onDragStart={(event) => this.props.onDragStart(event, card.name)}\n                draggable>\n                <h4>{`${this.props.addSpacesToName(card.name)}`}</h4>\n            </div>)\n        });\n\n        return(\n            <div>{filteredCards}</div>\n        );\n    }\n}\n\nexport default CardPreview;","\n/*\n * action types \n */\n\nexport const ADD_CARDS = 'ADD_CARDS'\nexport const SHOW_CARD = 'SHOW_CARD'\nexport const HIDE_CARD = 'HIDE_CARD'\nexport const CHANGE_CATEGORY = 'CHANGE_CATEGORY'\n\n/*\n * action creators\n */\n\nexport function addCards(userName, arrayOfCards) {\n    return { type: ADD_CARDS, user: userName, arrayOfCards } \n}\n\nexport function showCard(name) {\n    return { type: SHOW_CARD, name: name }\n}\n\nexport function hideCard() {\n    return { type: HIDE_CARD }\n}\n\nexport function changeCategory(name, newCategory) {\n    return { type: CHANGE_CATEGORY, name, newCategory }\n}\n\n\n","import React from 'react';\nimport CardForm from './CardForm';\nimport {connect} from 'react-redux';\nimport CardPreview from './CardPreview';\nimport {showCard} from '../actions/actions';\nimport {hideCard} from '../actions/actions';\nimport {changeCategory} from '../actions/actions'\n\nclass CardsResults extends React.Component {\n    constructor(props){\n        super(props);\n\n        // bind cause it is modifying state\n        this.handleClick = this.handleClick.bind(this);\n        this.handlePanelClicks = this.handlePanelClicks.bind(this);\n    }\n    \n    /***********************************************************/\n    // Click on each card preview to show/hide card\n\n    handleClick(name) {\n        this.props.dispatch(showCard(name));\n    }\n\n    /***********************************************************/\n    // Close button\n\n    handlePanelClicks(event) {\n        this.props.dispatch(hideCard());\n    }\n\n    /***********************************************************/\n    // Helper function to add spaces to a card name (for wrapping)\n\n    addSpacesToName(name){\n        return [...name].map(letter => {\n            return (letter.charCodeAt(0) > 64 && letter.charCodeAt(0) < 91) ? ' ' + letter : letter\n        }).join('')\n    }\n\n    /***********************************************************/\n    // Drag start\n\n    onDragStart(event, cardName){\n        event.dataTransfer.setData('card', cardName);    \n    }\n\n    /***********************************************************/\n    // Drag over\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    /***********************************************************/\n    // Drop\n\n    onDrop(event, newCategory) {\n        const name = event.dataTransfer.getData('card');\n        this.props.dispatch(changeCategory(name, newCategory));\n    }\n\n    /***********************************************************/\n    \n    render(){\n        return(\n            <div className=\"cards-all-results\">\n                {this.props.cards.showCard ? \n                <CardForm cardToShow={this.addSpacesToName(this.props.cards.showCardName)} user={this.props.cards.user} handlePanelClicks={this.handlePanelClicks}/> : null}\n                <div className=\"drag-sections\">\n                    <div onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDrop(event, 'new')} className=\"new\">\n                        <CardPreview cards={this.props.cards} category=\"new\" onDragStart={this.onDragStart} handleClick={this.handleClick} addSpacesToName={this.addSpacesToName}/>\n                        </div>\n                    <div onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDrop(event, 'active')} className=\"active\">\n                        <CardPreview cards={this.props.cards} category=\"active\" onDragStart={this.onDragStart} handleClick={this.handleClick} addSpacesToName={this.addSpacesToName}/>\n                        </div>\n                    <div onDragOver={(event) => this.onDragOver(event)} onDrop={(event) => this.onDrop(event, 'complete')} className=\"complete\">\n                        <CardPreview cards={this.props.cards} category=\"complete\" onDragStart={this.onDragStart} handleClick={this.handleClick} addSpacesToName={this.addSpacesToName}/>\n                    </div> \n                </div>            \n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cards: state\n    }\n}\n\nexport default connect(mapStateToProps)(CardsResults);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {addCards} from '../actions/actions';\n\n/***********************************************************/\n// global array to push card elements from website\n\nlet arrayOfCards = [];\n\nclass AddCards extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.handleLinkSubmit = this.handleLinkSubmit.bind(this);\n    }\n\n    /***********************************************************/\n    // on submit \n\n    handleLinkSubmit(event) {\n        event.preventDefault();\n\n        // set a page for parsing (need to make validation here)\n        const link = event.target[0].value ? `https://repl.it/@${event.target[0].value}` : 'https://repl.it/@polevoyd';\n        const userName = event.target[0].value || 'polevoyd';\n\n        // prepare request to scrape cards from page\n        let xhr = new XMLHttpRequest();\n        xhr.onload = function(){\n            const doc = this.responseXML;\n\n            // select all cards and push them into array\n            doc.querySelectorAll('.repl-item-title').forEach(element => {\n                const cardObject = { \n                    name: element.innerText,\n                    category: 'new'\n                }\n                arrayOfCards.push(cardObject);\n            })\n        }\n        xhr.open(\"GET\", link);\n        xhr.responseType = \"document\";\n        xhr.send();\n        \n        // after request sent, wait 2 sec and dispatch array to state\n        setTimeout(() => {\n            this.props.dispatch(addCards(userName, arrayOfCards));\n            arrayOfCards = [];\n        }, 2000)\n    }\n    \n    /***********************************************************/\n    \n    render(){\n        return(\n            <div className=\"add-card\">\n                <form onSubmit={this.handleLinkSubmit}>\n                    <label>\n                        Profile Link:\n                        <input type=\"text\" defaultValue=\"polevoyd\"/>\n                    </label>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\n// connect gives access to dispatch as a prop\nexport default connect()(AddCards);","import React from 'react';\nimport CardsResults from './CardsResults';\nimport AddCards from './AddCards';\n\nconst CardsMain = () => (\n    <div>\n        <AddCards />\n        <CardsResults />\n    </div>\n);\n\nexport default CardsMain;","// initialising state\nconst initialState =\n{\n    showCard: false,\n    showCardName: null,\n    user: '',\n    cardsObjects: []\n}\n\nconst cardReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case 'ADD_CARDS':\n            return({\n                showCard: false,\n                showCardName: null,\n                user: action.user,\n                cardsObjects: action.arrayOfCards\n            });\n\n        case 'SHOW_CARD':\n            return({\n                showCard: !state.showCard,\n                showCardName: action.name,\n                user: state.user,\n                cardsObjects: state.cardsObjects\n            })\n        \n        case 'HIDE_CARD':\n        return({\n            showCard: !state.showCard,\n            showCardName: null,\n            user: state.user,\n            cardsObjects: state.cardsObjects\n        })\n\n        case 'CHANGE_CATEGORY':\n        const newCardsArray = state.cardsObjects.map(card => {\n            return (card.name === action.name) ? { name : card.name, category : action.newCategory} : card;\n        })\n        return({\n            showCard: state.showCard,\n            showCardName: '',\n            user: state.user,\n            cardsObjects: newCardsArray\n        })\n        \n        default:\n            return state;\n    }\n}\n\nexport default cardReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CardsMain from './components/CardsMain';\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport cardReducer from './reducers/cardReducer';\n\n\nconst store = createStore(cardReducer); \n\nReactDOM.render(\n    <Provider store={store}>\n        <CardsMain />\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}